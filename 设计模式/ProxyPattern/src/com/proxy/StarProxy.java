/*
 * @Description：代理模式：指客户端并不直接调用实际的对象，而是通过调用代理，来间接地调用实际的对象。
 *               以明星和经纪人为例。
 *               
 *               这里是静态代理；
 *               
 *               关键点：1.代理类与委托类实现同一接口；
 *                    2.在委托类中实现功能，在代理类的方法中引用委托类的同名方法；
 *                    3.外部类调用委托类某个方法时，直接以接口指向代理类的实例，这正是代理的意义所在：屏蔽(屏蔽了具体的接口实现)；
 *                    
 *               动态代理是企业级项目(J2EE)中使用的；
 */
package com.proxy;

//代理类：负责帮助(粉丝)调用(明星)对象的方法
public class StarProxy implements Star{ //实现的是统一的接口

	@Override
	public void seal() {
		new StarImpl().seal();   //调用的是具体类的方法
	}

}
